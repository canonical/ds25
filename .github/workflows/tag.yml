name: Update package versions
on:
  workflow_dispatch:
    inputs:
      update_type:
        description: "Version update type"
        required: true
        # Change to minor once project is stable
        default: "prepatch"
        type: choice
        options:
          - patch
          - minor
          - major
          - prepatch
          - preminor
          - premajor
      prerelease_identifier:
        description: "Pre-release identifier, used for pre(patch|minor|major) versions"
        default: "experimental"
        required: false
        type: string
env:
  MAIN_BRANCH_REF: "refs/heads/main"

jobs:
  version:
    name: Bump package versions
    runs-on: ubuntu-latest
    outputs:
      PREV_VERSION: ${{ steps.prev_version.outputs.PREV_VERSION }}
      VERSION: ${{ steps.lerna_version.outputs.VERSION }}
    steps:
      - name: Validate input
        run: |
          if [[ "${{ github.ref }}" != "${{ env.MAIN_BRANCH_REF }}" ]]; then
            echo "This action can only be run on the main branch"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          # Lerna needs *all* the git history to determine which packages have changed
          fetch-depth: 0

      - name: Get previous version
        id: prev_version
        run: echo "PREV_VERSION=$(git describe --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Setup environment
        uses: ./.github/actions/setup-env
        with:
          # Ignore lifecycle scripts to avoid building packages that haven't changed
          ignore_scripts: true

        # Building changed packages manually since we ignored lifecycle scripts on `bun install`
      - name: Build changed packages
        run: bun run lerna run build --since ${{ steps.prev_version.outputs.PREV_VERSION }}

      - name: Update changed package versions
        id: lerna_version
        uses: ./.github/actions/lerna-version
        with:
          update_type: ${{ github.event.inputs.update_type }}
          prerelease_identifier: ${{ github.event.inputs.prerelease_identifier }}

      # `lerna version` may introduce slight formatting changes to the package.json files.
      # So, we run formatting fixes before running code quality checks and committing the changes.
      - name: Format files and run code quality checks
        run: bun run lerna run check:fix --since ${{ steps.prev_version.outputs.PREV_VERSION }}

      - name: Setup Git CLI
        uses: ./.github/actions/setup-git
        with:
          name: ${{ github.actor }}

      - name: Commit and tag v${{ steps.lerna_version.outputs.VERSION }}
        run: |
          git add .
          git commit -m "chore: version bump to ${{ steps.lerna_version.outputs.VERSION }}"
          # Create an annotated tag (`-m`) so that lerna can use it to determine which packages have changed
          # See https://github.com/lerna/lerna/issues/1357#issuecomment-438162152
          git tag "v${{ steps.lerna_version.outputs.VERSION }}" -m "v${{ steps.lerna_version.outputs.VERSION }}"
          git push && git push --tags

  publish:
    name: Publish packages
    runs-on: ubuntu-latest
    needs: version
    steps:
      - name: Setup Node, authenticate with NPM registry
        uses: actions/setup-node@v4.1.0
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Checkout the tag that was just created
          ref: v${{ needs.version.outputs.VERSION }}
          # Lerna needs *all* the git history to determine which packages have changed
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-env
        with:
          ignore_scripts: true

      - name: Build changed packages
        run: bun run lerna run build --since ${{ needs.version.outputs.PREV_VERSION }}

        # `lerna publish` does not have a `--since` flag; by default it will run the pre-publish lifecycle
        #   for all packages, even if they weren't changed.
        #   `--ignore-scripts` solves this and is safe - the updated packages are built in the env setup step.
      - name: Publish packages
        run: lerna publish from-package --no-private --ignore-scripts --yes
